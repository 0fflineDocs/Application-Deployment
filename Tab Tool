 #ERASE ALL THIS AND PUT XAML BELOW between the @" "@ 
$inputXML = @"
<Window x:Class="WpfApplication4.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApplication4"
        mc:Ignorable="d"
        Title="Tab Tool" Height="350" Width="519">
    <Grid>
        <TabControl x:Name="tabControl" HorizontalAlignment="Left" Height="309" VerticalAlignment="Top" Width="507">
            <TabItem Header="Computername" Margin="-2,0,1,0">
                <Grid Background="White">


                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18*"/>

                    </Grid.ColumnDefinitions>
                    <Image x:Name="image" HorizontalAlignment="Left" Height="100" Margin="391,10,0,0" VerticalAlignment="Top" Width="100" Source="C:\Users\Simon\Desktop\PS\luna.png
"/>
                    <TextBlock x:Name="textBlock" HorizontalAlignment="Left" Margin="52,192,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="22" Width="91" FontWeight="Bold"><Run FontWeight="Normal" Text="Computername"/><Run Text=":"/></TextBlock>
                    <TextBox x:Name="ComputerName" HorizontalAlignment="Left" Height="23" Margin="165,192,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="102"/>
                    <Button x:Name="button_usrc" Content="AnvÃ¤ndarcert" HorizontalAlignment="Left" Margin="15,251,0,0" VerticalAlignment="Top" Width="81" Height="20"/>
                    <Button x:Name="button_comc" Content="Datorcert" HorizontalAlignment="Left" Margin="122,251,0,0" VerticalAlignment="Top" Width="76" Height="20" Grid.ColumnSpan="2"/>
                    <Button x:Name="button_prnt" Content="Printmgmt" HorizontalAlignment="Left" Margin="223,251,0,0" VerticalAlignment="Top" Width="75"/>
                    <TextBlock x:Name="textBlock1" HorizontalAlignment="Left" Margin="15,23,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="81" Width="302" FontFamily="Courier New"><Run Text="GGWP!"/><LineBreak/><Run Text="This is Ryko's awesome PS-Tool."/><LineBreak/><Run/><LineBreak/><Run Text="Enter Computername and then verify that it's online by pressing the button for further use."/></TextBlock>

                </Grid>
            </TabItem>
            <TabItem Header="SystemInfo" Margin="-2,0,-21,0">

              <Grid Background="White">
                <Grid  Margin="0,0,45,0">
                   
                      <Button x:Name="Load_diskinfo_button" Content="get-DiskInfo" HorizontalAlignment="Left" Height="35" Margin="80,10,0,0" VerticalAlignment="Top" Width="121" FontSize="14" FontFamily="Courier New"/>
                    <ListView x:Name="disk_listView" HorizontalAlignment="Left" Height="232" Margin="0,61,-21,-12" VerticalAlignment="Top" Width="477" FontSize="16">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="Drive Letter" DisplayMemberBinding ="{Binding 'Drive Letter'}" Width="120"/>
                                <GridViewColumn Header="Drive Label" DisplayMemberBinding ="{Binding 'Drive Label'}" Width="120"/>
                                <GridViewColumn Header="Size(MB)" DisplayMemberBinding ="{Binding Size(MB)}" Width="120"/>
                                <GridViewColumn Header="FreeSpace%" DisplayMemberBinding ="{Binding FreeSpace%}" Width="120"/>
                            </GridView>
                        </ListView.View>
                    </ListView>
                        <Label x:Name="DiskLabel" Content="Disk info for system: " HorizontalAlignment="Left" Height="24" Margin="220,17,0,0" VerticalAlignment="Top" Width="197" Foreground="#000000" FontFamily="Courier New"/>
		</Grid>
</Grid>
                







            </TabItem>
            <TabItem Header="Services" HorizontalAlignment="Right" Height="20" VerticalAlignment="Top" Width="82" Margin="0,0,-20,0">
                <Grid Background="#FFE5E5E5"/>
            </TabItem>
            <TabItem Header="Processes" HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Width="98" Margin="20,0,-20,0">
                <Grid Background="#FFE5E5E5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="61*"/>
                        <ColumnDefinition Width="11*"/>
                        <ColumnDefinition Width="429*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="50*"/>
                        <RowDefinition Height="231*"/>
                    </Grid.RowDefinitions>
                </Grid>
            </TabItem>
        </TabControl>

    </Grid>
</Window>


"@
 
$inputXML = $inputXML -replace 'mc:Ignorable="d"','' -replace "x:N",'N' -replace '^<Win.*', '<Window'
[void][System.Reflection.Assembly]::LoadWithPartialName('presentationframework')
[xml]$XAML = $inputXML
#Read XAML
 
    $reader=(New-Object System.Xml.XmlNodeReader $xaml) 
  try{$Form=[Windows.Markup.XamlReader]::Load( $reader )}
catch [System.Management.Automation.MethodInvocationException] {
    Write-Warning "We ran into a problem with the XAML code.  Check the syntax for this control..."
    write-host $error[0].Exception.Message -ForegroundColor Red
    if ($error[0].Exception.Message -like "*button*"){
        write-warning "Ensure your &lt;button in the `$inputXML does NOT have a Click=ButtonClick property.  PS can't handle this`n`n`n`n"}
}
catch{#if it broke some other way <img draggable="false" class="emoji" alt="ðŸ˜€" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/1f600.svg">
    Write-Host "Unable to load Windows.Markup.XamlReader. Double-check syntax and ensure .net is installed."
        }
 
#===========================================================================
# Store Form Objects In PowerShell
#===========================================================================
 
$xaml.SelectNodes("//*[@Name]") | %{Set-Variable -Name "WPF$($_.Name)" -Value $Form.FindName($_.Name)}
 
Function Get-FormVariables{
if ($global:ReadmeDisplay -ne $true){Write-host "If you need to reference this display again, run Get-FormVariables" -ForegroundColor Yellow;$global:ReadmeDisplay=$true}
write-host "Found the following interactable elements from our form" -ForegroundColor Cyan
get-variable WPF*
}
 
Get-FormVariables
 
#===========================================================================
# Use this space to add code to the various form elements in your GUI
#===========================================================================

#LOCAL-COMPUTER CERTIFICATES

Function Compcert {
param ($mscPath = "C:\WINDOWS\system32\certlm.msc")
Start-Process -Filepath $mscPath -ArgumentList $mscPath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_comc.Add_Click({
Compcert  
})

#USER CERTIFICATES

Function Usercert {
param ($mscPath = "C:\WINDOWS\system32\certmgr.msc")
Start-Process -Filepath $mscPath -ArgumentList $mscPath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_usrc.Add_Click({
Usercert  
})

#PRINT MANAGEMENT

Function Print {
param ($mscPath = "C:\WINDOWS\system32\printmanagement.msc")

Start-Process -Filepath $mscPath -ArgumentList $mscPath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_prnt.Add_Click({
Print
})

#LOCAL-COMPUTER DISKINFO

$WPFLoad_diskinfo_button.Add_Click({
Function Get-DiskInfo {
param($computername =$env:COMPUTERNAME)
 
Get-WMIObject Win32_logicaldisk -ComputerName $computername | Select-Object @{Name='ComputerName';Ex={$computername}},`
                                                                    @{Name=â€˜Drive Letterâ€˜;Expression={$_.DeviceID}},`
                                                                    @{Name=â€˜Drive Labelâ€™;Expression={$_.VolumeName}},`
                                                                    @{Name=â€˜Size(MB)â€™;Expression={[int]($_.Size / 1MB)}},`
                                                                    @{Name=â€˜FreeSpace%â€™;Expression={[math]::Round($_.FreeSpace / $_.Size,2)*100}}
                                                                 }
                                                                  

Get-DiskInfo -computername $WPFComputerName.Text | % {$WPFdisk_listView.AddChild($_)}
$WPFDiskLabel.Content = "Disk info for system $($WPFComputerName.Text)"



})

                                                                    
     
#Reference 
 
#Adding items to a dropdown/combo box
    #$vmpicklistView.items.Add([pscustomobject]@{'VMName'=($_).Name;Status=$_.Status;Other="Yes"})
     
#Setting the text of a text box to the current PC name    
    #$WPFtextBox.Text = $env:COMPUTERNAME
     
#Adding code to a button, so that when clicked, it pings a system
# $WPFbutton.Add_Click({ Test-connection -count 1 -ComputerName $WPFtextBox.Text
# })
#===========================================================================
# Shows the form
#===========================================================================
write-host "To show the form, run the following" -ForegroundColor Cyan
'$Form.ShowDialog() | out-null'
