#REVISION - [2017-02-06] 

 #ERASE ALL THIS AND PUT XAML BELOW between the @" "@ 
$inputXML = @"
<Window x:Class="WpfApplication4.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApplication4"
        mc:Ignorable="d"
        Title="Certificate Authority" Height="360" Width="519">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="66*"/>
            <ColumnDefinition Width="293*"/>
            <ColumnDefinition Width="152*"/>
        </Grid.ColumnDefinitions>
        <Grid Background="White" Margin="0,0,10,38" Grid.ColumnSpan="3">


             <Grid.ColumnDefinitions>
                <ColumnDefinition Width="18*"/>

            </Grid.ColumnDefinitions>
         <Image x:Name="image_luna" HorizontalAlignment="Left" Height="100" Margin="391,10,0,0" VerticalAlignment="Top" Width="100" Source="C:\Users\Simon\Desktop\PS\luna.png "/>
         <TextBlock x:Name="textBlock" HorizontalAlignment="Left" Margin="118,287,0,-28" TextWrapping="Wrap" VerticalAlignment="Top" Height="22" Width="91" FontWeight="Bold"><Run FontWeight="Normal" Text="Computername"/><Run Text=":"/></TextBlock>
              <TextBox x:Name="ComputerName" HorizontalAlignment="Left" Height="23" Margin="231,285,0,-27" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="102"/>
            <Button x:Name="button_usrc" Content="Usercert" HorizontalAlignment="Left" Margin="73,251,0,0" VerticalAlignment="Top" Width="81" Height="20"/>
            <Button x:Name="button_comc" Content="Compcert" HorizontalAlignment="Left" Margin="180,251,0,0" VerticalAlignment="Top" Width="76" Height="20"/>
            <Button x:Name="button_prnt" Content="Printmgmt" HorizontalAlignment="Left" Margin="281,251,0,0" VerticalAlignment="Top" Width="75"/>
            <Button x:Name="button_iidcfg" Content="Config" HorizontalAlignment="Left" Margin="415,251,0,0" VerticalAlignment="Top" Width="76" Height="20"/>
            <Button x:Name="button_iidtrace" Content="Trace" HorizontalAlignment="Left" Margin="415,221,0,0" VerticalAlignment="Top" Width="76" Height="20" RenderTransformOrigin="1.051,-1.002"/>
            <Button x:Name="button_tracesrvc" Content="Trace-Service" HorizontalAlignment="Left" Margin="415,191,0,0" VerticalAlignment="Top" Width="76"/>
            <TextBlock x:Name="GGWP" HorizontalAlignment="Left" Margin="435,287,0,-28" TextWrapping="Wrap" VerticalAlignment="Top" Height="22" Width="64" FontFamily="Courier New" FontSize="14"><Run Text="GGWP!"/><LineBreak/></TextBlock>
            <Image x:Name="image_iid" HorizontalAlignment="Left" Height="41" Margin="10,56,0,0" VerticalAlignment="Top" Width="41" Source="C:\Users\Simon\Desktop\PS\netid.jpg "/>
            <Image x:Name="image_msintune" HorizontalAlignment="Left" Height="41" Margin="10,10,0,0" VerticalAlignment="Top" Width="41" Source="C:\Users\Simon\Desktop\PS\MS.png "/>
            <Button x:Name="button_compmgmt" Content="Compmgmt" HorizontalAlignment="Left" Margin="180,221,0,0" VerticalAlignment="Top" Width="76" Height="20"/>
            <TextBlock x:Name="textBlock_iid" HorizontalAlignment="Left" Margin="435,172,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="22" Width="41" FontWeight="Bold"><Run Text="Net iD"/><LineBreak/><Run/></TextBlock>
            <Button x:Name="button_taskmgr" Content="Taskmgr" HorizontalAlignment="Left" Margin="281,221,0,0" VerticalAlignment="Top" Width="75" Height="20"/>
            <Button x:Name="button_pshell" Content="PShell" HorizontalAlignment="Left" Margin="73,221,0,0" VerticalAlignment="Top" Width="81" Height="20"/>
            <Image x:Name="image_ctx" HorizontalAlignment="Left" Height="41" Margin="10,102,0,0" VerticalAlignment="Top" Width="41" Source="C:\Users\Simon\Desktop\PS\ctx.jpg "/>
            <Button x:Name="button_procmon" Content="Procmon" HorizontalAlignment="Left" Margin="73,191,0,0" VerticalAlignment="Top" Width="81" Height="20"/>
            <Button x:Name="button_procexp" Content="Procexp" HorizontalAlignment="Left" Margin="180,191,0,0" VerticalAlignment="Top" Width="76" Height="20"/>
            <Button x:Name="button_cardcache" Content="Cache" HorizontalAlignment="Left" Margin="281,191,0,0" VerticalAlignment="Top" Width="76" Height="20"/>
  
        </Grid>

    </Grid>
</Window>
"@
 
$inputXML = $inputXML -replace 'mc:Ignorable="d"','' -replace "x:N",'N' -replace '^<Win.*', '<Window'
[void][System.Reflection.Assembly]::LoadWithPartialName('presentationframework')
[xml]$XAML = $inputXML
#Read XAML
 
    $reader=(New-Object System.Xml.XmlNodeReader $xaml) 
  try{$Form=[Windows.Markup.XamlReader]::Load( $reader )}
catch [System.Management.Automation.MethodInvocationException] {
    Write-Warning "We ran into a problem with the XAML code.  Check the syntax for this control..."
    write-host $error[0].Exception.Message -ForegroundColor Red
    if ($error[0].Exception.Message -like "*button*"){
        write-warning "Ensure your &lt;button in the `$inputXML does NOT have a Click=ButtonClick property.  PS can't handle this`n`n`n`n"}
}
catch{#if it broke some other way <img draggable="false" class="emoji" alt="ðŸ˜€" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/1f600.svg">
    Write-Host "Unable to load Windows.Markup.XamlReader. Double-check syntax and ensure .net is installed."
        }
 
#===========================================================================
# Store Form Objects In PowerShell
#===========================================================================
 
$xaml.SelectNodes("//*[@Name]") | %{Set-Variable -Name "WPF$($_.Name)" -Value $Form.FindName($_.Name)}
 
Function Get-FormVariables{
if ($global:ReadmeDisplay -ne $true){Write-host "If you need to reference this display again, run Get-FormVariables" -ForegroundColor Yellow;$global:ReadmeDisplay=$true}
write-host "Found the following interactable elements from our form" -ForegroundColor Cyan
get-variable WPF*
}
 
Get-FormVariables
 
#===========================================================================
# Use this space to add code to the various form elements in your GUI
#===========================================================================


#LOCAL-COMPUTER CERTIFICATES
Function Compcert {
param ($mscPath = "C:\WINDOWS\system32\certlm.msc")
Start-Process -Filepath $mscPath -ArgumentList $mscPath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_comc.Add_Click({
Compcert  
})

#USER CERTIFICATES
Function Usercert {
param ($mscPath = "C:\WINDOWS\system32\certmgr.msc")
Start-Process -Filepath $mscPath -ArgumentList $mscPath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_usrc.Add_Click({
Usercert  
})

#PRINT MANAGEMENT
Function Print {
param ($mscPath = "C:\WINDOWS\system32\printmanagement.msc")

Start-Process -Filepath $mscPath -ArgumentList $mscPath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_prnt.Add_Click({
Print
})

#PowerShell
Function Pshell {
param ($mscPath = "C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe")
Start-Process -Filepath $mscPath -ArgumentList $mscPath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_pshell.Add_Click({
Pshell 
})

#compmgmt
Function compmgmt {
param ($exePath = "C:\WINDOWS\system32\compmgmt.msc" )
Start-Process -Filepath $exePath -ArgumentList $exePath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_compmgmt.Add_Click({
compmgmt
})

#taskmgr
Function Taskmgr {
param ($exePath = "C:\Windows\system32\taskmgr.exe")
Start-Process -Filepath $exePath -ArgumentList $exePath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_taskmgr.Add_Click({
Taskmgr
})
                                                                 
#iidcache
Function iidcache {
param ($exepath = "C:\Windows\Temp")
Invoke-Item $exePath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_cardcache.Add_Click({
iidcache
})
      
#iidtrace
Function iidtrace {
param ($exePath = "C:\Users\sha057\AppData\LocalLow\iid")
Invoke-Item $exePath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_iidtrace.Add_Click({
iidtrace
}) 
 
#iidservice
Function iidservice {
param ($exePath =  "C:\Program Files\Net iD\iid.exe")
Start-Process -Filepath $exePath -ArgumentList $exePath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_iidtrace.Add_Click({
iidservice
}) 
  
 #iidcfg
Function iidcfg {
param ($exePath =  "C:\Users\sha057\AppData\Roaming\iid")
Invoke-Item $exePath
}

$WPFComputerName.Text = $env:COMPUTERNAME

$WPFbutton_iidcfg.Add_Click({
iidcfg
}) 
                       
        
#button_procexp 
               
#button_procmon

#Reference 
 
#Adding items to a dropdown/combo box
    #$vmpicklistView.items.Add([pscustomobject]@{'VMName'=($_).Name;Status=$_.Status;Other="Yes"})
     
#Setting the text of a text box to the current PC name    
    #$WPFtextBox.Text = $env:COMPUTERNAME
     
#Adding code to a button, so that when clicked, it pings a system
# $WPFbutton.Add_Click({ Test-connection -count 1 -ComputerName $WPFtextBox.Text
# })
#===========================================================================
# Shows the form
#===========================================================================
write-host "To show the form, run the following" -ForegroundColor Cyan
'$Form.ShowDialog() | out-null'
